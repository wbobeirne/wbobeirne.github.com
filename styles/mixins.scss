@use "sass:math";

@mixin dark-mode() {
  [data-theme="dark"] & {
    @content;
  }
}

@mixin mq-mid {
  @media screen and (max-width: 1180px) {
    @content;
  }
}

@mixin mq-slim {
  @media screen and (max-width: 880px) {
    @content;
  }
}

@mixin mq-mobile {
  @media screen and (max-width: 520px) {
    @content;
  }
}

@mixin mq-tiny {
  @media screen and (max-width: 380px) {
    @content;
  }
}

@mixin mq-work-2col {
  @media screen and (max-width: 580px) {
    @content;
  }
}

@mixin webkit {
  @supports (background: -webkit-named-image(i)) {
    @content;
  }
}

@mixin main-background {
  background: var(--palette-background);
  background: linear-gradient(
    0deg,
    var(--palette-backgroundShaded),
    var(--palette-background)
  );
  background-position: 0% 50%;
  background-attachment: fixed;
}

$content-width: 720px;
$content-width-mid: 600px;
@mixin content-container {
  width: calc(100% - 12px);
  max-width: $content-width;

  @include mq-mid {
    max-width: $content-width-mid;
  }

  @include mq-slim {
    max-width: none;
  }
}

@mixin border-3d($depth, $shadowLight, $shadowDark) {
  position: relative;

  &::before,
  &::after {
    position: absolute;
    content: "";
  }

  &::before {
    bottom: -$depth;
    left: math.div($depth, 2);
    width: 100%;
    height: $depth;
    background: $shadowDark;
    transform: skewX(45deg);
  }

  &::after {
    right: -$depth;
    bottom: math.div(-$depth, 2);
    height: 100%;
    width: $depth;
    background: $shadowLight;
    transform: skewY(45deg);
  }
}

@mixin border-3d-sunk($depth, $sink) {
  top: $sink;
  left: $sink;

  &::before {
    bottom: -$depth + $sink;
    height: $depth - $sink;
    left: math.div($depth, 2) - math.div($sink, 2);
  }

  &::after {
    right: -$depth + $sink;
    width: $depth - $sink;
    bottom: -(math.div($depth, 2) - math.div($sink, 2));
  }
}

@mixin text-3d($color, $unit: math.div(1rem, 16)) {
  $shadows: ();
  @for $i from -2 through 2 {
    @for $j from -2 through 2 {
      $shadows: append($shadows, #{$unit * $i} #{$unit * $j} $color, comma);
    }
  }
  @for $i from -1 through 4 {
    @for $j from -1 through 4 {
      @if $j >= $i {
        $shadows: append($shadows, #{$unit * $i} #{$unit * $j} $color, comma);
      }
    }
  }
  text-shadow: $shadows;
}

@mixin custom-scrollbar($track-color, $thumb-color) {
  scrollbar-color: $track-color $thumb-color;
  &::-webkit-scrollbar {
    width: 12px;
    height: 12px;
  }
  &::-webkit-scrollbar-track {
    background: $track-color;
  }
  &::-webkit-scrollbar-thumb {
    border: 2px solid $track-color;
    background: $thumb-color;
    border-radius: 10px;
  }
  &::-webkit-scrollbar-thumb:horizontal:hover,
  &::-webkit-scrollbar-thumb:vertical:hover {
    filter: grayscale(1);
  }
}
